Create database:
    create database eventManagementSystem;
    use eventManagementSystem;

Tables Creation(Using constraints):
    CREATE TABLE USERS (
        user_id VARCHAR(100) PRIMARY KEY,
        dept VARCHAR(30),
        no_of_events INT,
        event_id VARCHAR(100)
    );

    CREATE TABLE LOGIN (
        user_id VARCHAR(100) PRIMARY KEY,
        password VARCHAR(50),
        account_type VARCHAR(10),
        FOREIGN KEY (user_id) REFERENCES USERS(user_id)
    );

    CREATE TABLE HOST (
        event_id VARCHAR(10),
        user_id VARCHAR(100),
        date DATE,
        time TIME,
        dept VARCHAR(30),
        fees INT,
        max_capacity INT,
        PRIMARY KEY (event_id, user_id),
        FOREIGN KEY (user_id) REFERENCES USERS(user_id)
    );


Insertion of Values:
    INSERT INTO LOGIN (user_id, password, class) VALUES
        ('U001', 'pass123', 'user'),
        ('U002', 'ecepass', 'user'),
        ('U003', 'mechadmin', 'host');

    INSERT INTO USERS (user_id, dept, no_of_events, event_id) VALUES 
        ('U001', 'CSE', 2, 'E101, E102'),
        ('U002', 'ECE', 1, 'E102'),
        ('U003', 'MECH', 3, 'E103, E101, E102');

    
    INSERT INTO HOST (event_id, user_id, date, time, dept, fees, max_capacity) VALUES
        ('E101', 'U001', '2025-06-01', '10:00:00', 'CSE', 100, 50),
        ('E102', 'U002', '2025-06-05', '14:00:00', 'ECE', 150, 30),
        ('E103', 'U003', '2025-06-10', '09:30:00', 'MECH', 200, 40);
    
1 NF:
    The above tables are in 1 NF if the insertion of records into USERS table are done as:

    INSERT INTO USERS (user_id, dept, no_of_events, event_id) VALUES 
        ('U001', 'CSE', 2, 'E101'),
        ('U001', 'CSE', 2, 'E102'),
        ('U002', 'ECE', 1, 'E102'),
        ('U003', 'MECH', 3, 'E103');
        ('U003', 'MECH', 3, 'E101');
        ('U003', 'MECH', 3, 'E102');

2 NF:
    Here, the composite primary key is (event_id, user_id).
    However, attributes like: date, time, dept, fees, max_capacity depend only on event_id, not the full composite key (event_id, user_id)

    Create a separate EVENTS table to store:
        event_id (PK)

        date, time, dept, fees, max_capacity
    Then, HOST becomes just a mapping table:
        user_id, event_id as composite PK

    No partial dependency issues

    Thus, the tables in 2 NF are:

    CREATE TABLE USERS (
        user_id VARCHAR(100) PRIMARY KEY,
        dept VARCHAR(30),
        no_of_events INT
    );

    CREATE TABLE EVENTS (
        event_id VARCHAR(10) PRIMARY KEY,
        date DATE,
        time TIME,
        dept VARCHAR(30),
        fees INT,
        max_capacity INT
    );

    CREATE TABLE HOST (
        event_id VARCHAR(10),
        user_id VARCHAR(100),
        PRIMARY KEY (event_id, user_id),
        FOREIGN KEY (event_id) REFERENCES EVENTS(event_id),
        FOREIGN KEY (user_id) REFERENCES USERS(user_id)
    );

    No changes in LOGIN table.

3 NF:
    Here, dept is a non-key attribute in the EVENTS schema, and it may determine other fields like fees, max_capacity (in a real-world scenario, departments often have default configurations for events).
    Thus:

        fees and max_capacity are transitively dependent on dept, not on event_id directly.

    To achieve 3NF, we separate this dependency.

    Thus, the tables in 3 NF are:
    

    CREATE TABLE DEPARTMENT (
        dept VARCHAR(30) PRIMARY KEY,
        default_fees INT,
        default_max_capacity INT
    );

    CREATE TABLE EVENTS (
        event_id VARCHAR(10) PRIMARY KEY,
        date DATE,
        time TIME,
        dept VARCHAR(30),
        FOREIGN KEY (dept) REFERENCES DEPARTMENT(dept)
    );

    No changes to LOGIN, USERS, HOST tables.

Thus, the relations in 3 NF forms are:
    USERS(user_id, dept, no_of_events)
    LOGIN(user_id, password, account_type)
    DEPARTMENT(dept, default_fees, default_max_capacity)
    EVENTS(event_id, date, time, dept)
    HOST(event_id, user_id)


Views:
    - Lists all events hosted by each department with their scheduled times and default parameters.
    CREATE VIEW DepartmentEvents AS
    SELECT 
        e.event_id,
        e.dept,
        e.date,
        e.time,
        d.default_fees,
        d.default_max_capacity
    FROM EVENTS e
    JOIN DEPARTMENT d ON e.dept = d.dept;

    - Shows which users are hosting which events, along with department and timing details.
    CREATE VIEW UserEventDetails AS
    SELECT 
        u.user_id,
        u.dept AS user_dept,
        e.event_id,
        e.date,
        e.time,
        e.dept AS event_dept,
        d.default_fees AS event_fees,
        d.default_max_capacity AS max_capacity
    FROM USERS u
    JOIN HOST h ON u.user_id = h.user_id
    JOIN EVENTS e ON h.event_id = e.event_id
    JOIN DEPARTMENT d ON e.dept = d.dept;

Triggers:
    - Prevent duplicate user_id in LOGIN not matching USERS. Ensures only existing users can have a login.
    DELIMITER $$

    CREATE TRIGGER prevent_invalid_login_insert
    BEFORE INSERT ON LOGIN
    FOR EACH ROW
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM USERS WHERE user_id = NEW.user_id
        ) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Cannot create login: user_id does not exist in USERS table.';
        END IF;
    END$$

    DELIMITER ;

    - Whenever a user is assigned to host a new event, increment their no_of_events.
    DELIMITER $$

    CREATE TRIGGER increment_event_count
    AFTER INSERT ON HOST
    FOR EACH ROW
    BEGIN
        UPDATE USERS
        SET no_of_events = no_of_events + 1
        WHERE user_id = NEW.user_id;
    END$$

    DELIMITER ;

Functions and Procedures:
    - Function: Returns how many events a specific user is hosting.

    DELIMITER $$

    CREATE FUNCTION getEventCount(u_id VARCHAR(100))
    RETURNS INT
    DETERMINISTIC
    BEGIN
        DECLARE count_events INT;

        SELECT COUNT(*) INTO count_events
        FROM HOST
        WHERE user_id = u_id;

        RETURN count_events;
    END$$

    DELIMITER ;

    - Assigns a user to host an event and updates their no_of_events field.
    DELIMITER $$

    CREATE PROCEDURE assignHost(IN e_id VARCHAR(10), IN u_id VARCHAR(100))
    BEGIN
        -- Check if the assignment already exists
        IF NOT EXISTS (
            SELECT * FROM HOST WHERE event_id = e_id AND user_id = u_id
        ) THEN
            INSERT INTO HOST (event_id, user_id) VALUES (e_id, u_id);

            UPDATE USERS
            SET no_of_events = no_of_events + 1
            WHERE user_id = u_id;
        END IF;
    END$$

    DELIMITER ;
